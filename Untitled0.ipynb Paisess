{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/LidiaCatota/gbi6unix/blob/main/Untitled0.ipynb%20Paisess\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## ACTIVIDAD MAP OF SICENCE\n",
        "\n",
        "1. Buscar bibliografía de un tema de interés propio en la Página Web de PubMed.\n",
        "\n",
        "2. Realizar el minado de autores por país. Para asignar las ubicación geográfica de los centroides - de cada país (latitud y longitud), utilice la tabla Ubicación Geográfica de Países - Google Developer (https://developers.google.com/public-data/docs/canonical/countries_csv?hl=es-419). \n",
        "\n",
        "3. Señale/resalte a los siguientes países: USA, UK, Brazil, China, Australia, Norway. \n",
        "\n",
        "4. Cargue su cuaderno de Jupyter en Git`Hub`"
      ],
      "metadata": {
        "id": "4UTdRCN-eI_u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 328
        },
        "id": "XiBzORbx2gh5",
        "outputId": "1d38222c-9b71-4bb8-a42a-d8ff51f7a999"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-1-d5df0069828e>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms, readonly)\u001b[0m\n\u001b[1;32m    101\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m120000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreadonly\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    102\u001b[0m   \u001b[0;34m\"\"\"Mount your Google Drive at the specified mountpoint path.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 103\u001b[0;31m   return _mount(\n\u001b[0m\u001b[1;32m    104\u001b[0m       \u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m       \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mforce_remount\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36m_mount\u001b[0;34m(mountpoint, force_remount, timeout_ms, ephemeral, readonly)\u001b[0m\n\u001b[1;32m    130\u001b[0m   )\n\u001b[1;32m    131\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mephemeral\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 132\u001b[0;31m     _message.blocking_request(\n\u001b[0m\u001b[1;32m    133\u001b[0m         \u001b[0;34m'request_auth'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'authType'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'dfs_ephemeral'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m     )\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mblocking_request\u001b[0;34m(request_type, request, timeout_sec, parent)\u001b[0m\n\u001b[1;32m    174\u001b[0m       \u001b[0mrequest_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparent\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexpect_reply\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m   )\n\u001b[0;32m--> 176\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m     94\u001b[0m     \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_read_next_input_message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_NOT_READY\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 96\u001b[0;31m       \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.025\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     97\u001b[0m       \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     98\u001b[0m     if (\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### Para la primera parte de la actividad \n",
        "\n",
        "# Primero se activa el paquete 're' y se abre el archivo descargado con el comando with open, donde\n",
        "# with se usa para facilitar la apertura y cierre de archivos en python\n",
        "\n",
        "import re\n",
        "\n",
        "with open('pubmed-spiderveno-set.txt') as f: # Aquí debe ir el nombre del archivo que ustedes han descargado \n",
        "    texto1 = f.read()\n",
        "    #print (texto1)"
      ],
      "metadata": {
        "id": "4YvfVRpAfkLc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# En la línea de AD existe separacion en sus propios datos en un patro de salto de línea \n",
        "# seguido por 6 espacios y posteriormente la información que continua la línea AD (\\n\\s{6}), por\n",
        "# lo mismo, se borra este patron y se lo reemplaza por un solo espacio para de esta manera unir las \n",
        "# líneas diferentes:\n",
        "\n",
        "texto2 = re.sub(r'\\n\\s{6}', ' ', texto1)\n",
        "\n",
        "# Se puede usar print para verificar la información obtenida del archivo, y de esta manera poder \n",
        "# seleccionar el patron a emplear, en este caso se lo ha dejado como comentario para facilitar la \n",
        "# lectura del resto del codigo\n",
        "\n",
        "#print (texto2) "
      ],
      "metadata": {
        "id": "OPdp2OHYf_RM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### A continuación se realiza la busqueda de los patrones específicos. \n",
        "\n",
        "## Se ha dividido cada patron para obtener resultados con mejor presentación y más prescisos\n",
        "## Asimismo, se utiliza flags=re.M para leer el texto como multilínes y que identifique \n",
        "## la línea que comience con AD\n",
        "\n",
        "# El primero se ha tomado como patron todos los paises que estén escritos de la siguiente manera:\n",
        "# [espacio][Código postal], País. palabra\n",
        "# Cabe destacar que los codigos postales tienen desde 4 a 7 cifras, asimismo, solo se tomó en\n",
        "#cuenta a quellos paises que tienen de 4 a 10 letras. Se utilizó [A-Z]{1}, para indicar que el \n",
        "# patrón alfanumérico comienza con una letra en mayuscula de la A a la Z. \n",
        "\n",
        "texto3 = re.findall(r'^AD |\\s\\d{4,7}\\,\\s([A-Z]{1}\\w{4,10}\\.\\s\\w)', texto2, flags=re.M)\n",
        "\n",
        "# Para el siguiente patrón, se tomó palabra, País. [salto de línea] \n",
        "# y se utilizaron las restricciones mencionadas anteriormente. \n",
        "\n",
        "texto4 = re.findall(r'^AD | \\w*\\,\\s([A-Z]{1}\\w{4,10}\\.\\n)', texto2, flags=re.M)\n",
        "\n",
        "# En el siguiente, se tomó: letra. País. [salto de línea]: \n",
        "\n",
        "texto5 = re.findall(r'^AD | \\w\\.\\s([A-Z]{1}\\w*\\.\\n)', texto2, flags=re.M)\n",
        "\n",
        "# En el siguiente, se tomó: [espacio]palabras. País. [correo electrónico]: \n",
        "  \n",
        "texto6 = re.findall(r'^AD | \\s(\\w*\\.)\\s[a-z0-9_\\.-]+@[\\da-z\\.-]+\\.[a-z\\.]{2,6}\\.\\n', texto2, flags=re.M)\n",
        "\n",
        "# En el siguiente, se tomó: palabras. País SegundoNombre.\\n: \n",
        "\n",
        "texto7 = re.findall(r'^AD | \\w*\\,\\s([A-Z]\\w*\\s[A-Z]\\w*\\.\\n)', texto2, flags=re.M)\n",
        "\n",
        "# En el siguiente, se tomó: [espacio]CodigoPostal, País. palabra: \n",
        "\n",
        "texto8 = re.findall(r'^AD |\\s\\d{4,7}\\,\\s([A-Z]{3}\\.\\s\\w)', texto2, flags=re.M)\n",
        "\n",
        "# En el siguiente, se tomó: palabra, USA.\\n:\n",
        "\n",
        "texto9 = re.findall(r'^AD | \\w*\\,\\s([A-Z]{3}\\.\\n)', texto2, flags=re.M)\n",
        "\n",
        "# En el siguiente, se tomó: [espacio][Código postal], País.\\n:\n",
        "\n",
        "texto10 = re.findall(r'^AD |\\s\\d{4,7}\\,\\s([A-Z]{1}\\w{4,10}\\.\\n)', texto2, flags=re.M)"
      ],
      "metadata": {
        "id": "DG5zhDOqgiiC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Posteriormente, se genera una lista con elementos unicos de cada una de las listas generadas \n",
        "# anteriormente con las expresiones regulares.\n",
        "\n",
        "## Sin embargo, se excluirá el texto8, por poseer casos especiales como USA. J\n",
        "\n",
        "unique_texto1 = list(set(texto3))\n",
        "\n",
        "unique_texto2 = list(set(texto4))\n",
        "\n",
        "unique_texto3 = list(set(texto5))\n",
        "\n",
        "unique_texto4 = list(set(texto6))\n",
        "\n",
        "unique_texto5 = list(set(texto7))\n",
        "\n",
        "unique_texto7 = list(set(texto9))\n",
        "\n",
        "unique_texto8 = list(set(texto10))\n",
        "\n",
        "print (unique_texto1)\n",
        "\n",
        "print (unique_texto2)\n",
        "\n",
        "print (unique_texto3)\n",
        "\n",
        "print (unique_texto4)\n",
        "\n",
        "print (unique_texto5)\n",
        "\n",
        "print (unique_texto7)\n",
        "\n",
        "print (unique_texto8)"
      ],
      "metadata": {
        "id": "3lyO99CIg6_i",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2b74fb5c-41ec-4b4d-b108-01fec6d023bb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['', 'Taiwan.\\nA', 'Australia. m', 'Austria.\\nF', 'China. l', 'Romania.\\nL', 'Singapore.\\nF', 'Korea.\\nL', 'Germany.\\nL', 'Taiwan. E', 'Romania.\\nA', 'Pakistan. E', 'Australia. n', 'Switzerland.\\nF', 'China. h', 'Australia. g', 'Pakistan.\\nF', 'Australia. d', 'Mexico. E', 'Italy. m', 'Thailand.\\nA', 'Colombia.\\nA', 'Romania.\\nF', 'Mexico.\\nL', 'China. r', 'China. p', 'Thailand.\\nL', 'China. d', 'Argentina.\\nF', 'Tunisia.\\nL', 'Chile.\\nA', 'China. f', 'China. s', 'Russia. p', 'Israel. E', 'Australia. N', 'Taiwan.\\nF', 'Belgium.\\nF', 'China.\\nL', 'Australia. j', 'Russia.\\nA', 'Denmark. h', 'Australia. k', 'Australia. e', 'Australia. s', 'Ukraine.\\nF', 'India. d', 'Israel. a', 'Italy. v', 'Italy. c', 'Australia.\\nF', 'Russia. a', 'Mexico. a', 'Australia. E', 'Chile.\\nL', 'Australia. v', 'China. b', 'Mexico. h', 'China. j', 'Italy. a', 'China.\\nF', 'Tunisia.\\nF', 'Spain.\\nF', 'China. c', 'Hungary.\\nL', 'India. E', 'Australia. r', 'Australia.\\nA', 'Israel. y', 'Australia. c', 'Australia. y', 'China. x', 'France.\\nF', 'Colombia. c', 'Mexico. r', 'China. y', 'China. 4', 'China. z', 'Chile. p', 'Australia. b', 'India.\\nF', 'Korea. E', 'Colombia.\\nL', 'Mexico. c', 'Russia.\\nF', 'Russia.\\nL', 'Australia. l', 'Korea.\\nF', 'Germany.\\nF', 'China. n', 'Germany.\\nA', 'Mexico. j', 'Australia. z', 'China. w', 'Australia. i', 'France. e', 'Australia. A', 'Australia. t', 'Colombia. s', 'Mexico.\\nF', 'Colombia.\\nF', 'Uruguay.\\nL', 'Singapore.\\nL', 'Taiwan.\\nL', 'Australia. p', 'Singapore. E', 'Australia.\\nL', 'Thailand. p', 'China. E', 'China.\\nA', 'Germany. E', 'Chile.\\nF', 'China. t', 'Mexico. o', 'Mexico. e', 'Thailand.\\nF', 'Australia. M', 'Australia. a', 'China. m']\n",
            "['', 'China.\\n', 'Brazil.\\n', 'Taiwan.\\n', 'Singapore.\\n', 'Norway.\\n', 'Algeria.\\n', 'Greece.\\n', 'Finland.\\n', 'Denmark.\\n', 'Sweden.\\n', 'Poland.\\n', 'Malaysia.\\n', 'Philippines.\\n', 'Ukraine.\\n', 'France.\\n', 'Netherlands.\\n', 'India.\\n', 'Italy.\\n', 'Venezuela.\\n', 'Germany.\\n', 'Portugal.\\n', 'Romania.\\n', 'Spain.\\n', 'Austria.\\n', 'Egypt.\\n', 'Hungary.\\n', 'Israel.\\n', 'Chile.\\n', 'Canada.\\n', 'Pakistan.\\n', 'Australia.\\n', 'Slovenia.\\n', 'Belgium.\\n', 'Tunisia.\\n', 'Thailand.\\n', 'Japan.\\n', 'Switzerland.\\n', 'Turkey.\\n', 'Russia.\\n', 'Argentina.\\n', 'Ireland.\\n', 'Colombia.\\n', 'Uruguay.\\n', 'Mexico.\\n', 'Korea.\\n']\n",
            "['', 'China.\\n']\n",
            "['', 'Africa.', 'Switzerland.', 'China.', 'Italy.', 'Australia.', 'Brazil.', 'Germany.', 'USA.', 'Argentina.', 'Colombia.']\n",
            "['', 'United Kingdom.\\n', 'The Netherlands.\\n', 'Saudi Arabia.\\n', 'Hong Kong.\\n', 'South Africa.\\n', 'New Zealand.\\n', 'Czech Republic.\\n', 'Costa Rica.\\n']\n",
            "['', 'USA.\\n']\n",
            "['', 'China.\\n', 'Taiwan.\\n', 'Singapore.\\n', 'Ukraine.\\n', 'France.\\n', 'India.\\n', 'Germany.\\n', 'Romania.\\n', 'Spain.\\n', 'Austria.\\n', 'Hungary.\\n', 'Chile.\\n', 'Pakistan.\\n', 'Australia.\\n', 'Belgium.\\n', 'Tunisia.\\n', 'Thailand.\\n', 'Switzerland.\\n', 'Russia.\\n', 'Argentina.\\n', 'Colombia.\\n', 'Uruguay.\\n', 'Mexico.\\n', 'Korea.\\n']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "## Como se pudo observar gracias a print, en el anterior punto. Existe un elemento extra al inicio\n",
        "# de cada lista -> '', por lo que se procede a borrarlo, para que el mismo no genere problemas\n",
        "# con lo que resta del código. Se emplea lista.pop[posición]\n",
        "\n",
        "unique_texto1.pop(0)\n",
        "unique_texto2.pop(0)\n",
        "unique_texto3.pop(0)\n",
        "unique_texto4.pop(0)\n",
        "unique_texto5.pop(0)\n",
        "unique_texto7.pop(0)\n",
        "unique_texto8.pop(0)\n",
        "\n",
        "print(unique_texto1)\n",
        "print(unique_texto2)\n",
        "print(unique_texto3)\n",
        "print(unique_texto4)\n",
        "print(unique_texto5)\n",
        "print(unique_texto7)\n",
        "print(unique_texto8)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A1OkO7Ixh4Li",
        "outputId": "1c991065-a0ec-4609-f089-2f437f56c546"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Taiwan.\\nA', 'Australia. m', 'Austria.\\nF', 'China. l', 'Romania.\\nL', 'Singapore.\\nF', 'Korea.\\nL', 'Germany.\\nL', 'Taiwan. E', 'Romania.\\nA', 'Pakistan. E', 'Australia. n', 'Switzerland.\\nF', 'China. h', 'Australia. g', 'Pakistan.\\nF', 'Australia. d', 'Mexico. E', 'Italy. m', 'Thailand.\\nA', 'Colombia.\\nA', 'Romania.\\nF', 'Mexico.\\nL', 'China. r', 'China. p', 'Thailand.\\nL', 'China. d', 'Argentina.\\nF', 'Tunisia.\\nL', 'Chile.\\nA', 'China. f', 'China. s', 'Russia. p', 'Israel. E', 'Australia. N', 'Taiwan.\\nF', 'Belgium.\\nF', 'China.\\nL', 'Australia. j', 'Russia.\\nA', 'Denmark. h', 'Australia. k', 'Australia. e', 'Australia. s', 'Ukraine.\\nF', 'India. d', 'Israel. a', 'Italy. v', 'Italy. c', 'Australia.\\nF', 'Russia. a', 'Mexico. a', 'Australia. E', 'Chile.\\nL', 'Australia. v', 'China. b', 'Mexico. h', 'China. j', 'Italy. a', 'China.\\nF', 'Tunisia.\\nF', 'Spain.\\nF', 'China. c', 'Hungary.\\nL', 'India. E', 'Australia. r', 'Australia.\\nA', 'Israel. y', 'Australia. c', 'Australia. y', 'China. x', 'France.\\nF', 'Colombia. c', 'Mexico. r', 'China. y', 'China. 4', 'China. z', 'Chile. p', 'Australia. b', 'India.\\nF', 'Korea. E', 'Colombia.\\nL', 'Mexico. c', 'Russia.\\nF', 'Russia.\\nL', 'Australia. l', 'Korea.\\nF', 'Germany.\\nF', 'China. n', 'Germany.\\nA', 'Mexico. j', 'Australia. z', 'China. w', 'Australia. i', 'France. e', 'Australia. A', 'Australia. t', 'Colombia. s', 'Mexico.\\nF', 'Colombia.\\nF', 'Uruguay.\\nL', 'Singapore.\\nL', 'Taiwan.\\nL', 'Australia. p', 'Singapore. E', 'Australia.\\nL', 'Thailand. p', 'China. E', 'China.\\nA', 'Germany. E', 'Chile.\\nF', 'China. t', 'Mexico. o', 'Mexico. e', 'Thailand.\\nF', 'Australia. M', 'Australia. a', 'China. m']\n",
            "['China.\\n', 'Brazil.\\n', 'Taiwan.\\n', 'Singapore.\\n', 'Norway.\\n', 'Algeria.\\n', 'Greece.\\n', 'Finland.\\n', 'Denmark.\\n', 'Sweden.\\n', 'Poland.\\n', 'Malaysia.\\n', 'Philippines.\\n', 'Ukraine.\\n', 'France.\\n', 'Netherlands.\\n', 'India.\\n', 'Italy.\\n', 'Venezuela.\\n', 'Germany.\\n', 'Portugal.\\n', 'Romania.\\n', 'Spain.\\n', 'Austria.\\n', 'Egypt.\\n', 'Hungary.\\n', 'Israel.\\n', 'Chile.\\n', 'Canada.\\n', 'Pakistan.\\n', 'Australia.\\n', 'Slovenia.\\n', 'Belgium.\\n', 'Tunisia.\\n', 'Thailand.\\n', 'Japan.\\n', 'Switzerland.\\n', 'Turkey.\\n', 'Russia.\\n', 'Argentina.\\n', 'Ireland.\\n', 'Colombia.\\n', 'Uruguay.\\n', 'Mexico.\\n', 'Korea.\\n']\n",
            "['China.\\n']\n",
            "['Africa.', 'Switzerland.', 'China.', 'Italy.', 'Australia.', 'Brazil.', 'Germany.', 'USA.', 'Argentina.', 'Colombia.']\n",
            "['United Kingdom.\\n', 'The Netherlands.\\n', 'Saudi Arabia.\\n', 'Hong Kong.\\n', 'South Africa.\\n', 'New Zealand.\\n', 'Czech Republic.\\n', 'Costa Rica.\\n']\n",
            "['USA.\\n']\n",
            "['China.\\n', 'Taiwan.\\n', 'Singapore.\\n', 'Ukraine.\\n', 'France.\\n', 'India.\\n', 'Germany.\\n', 'Romania.\\n', 'Spain.\\n', 'Austria.\\n', 'Hungary.\\n', 'Chile.\\n', 'Pakistan.\\n', 'Australia.\\n', 'Belgium.\\n', 'Tunisia.\\n', 'Thailand.\\n', 'Switzerland.\\n', 'Russia.\\n', 'Argentina.\\n', 'Colombia.\\n', 'Uruguay.\\n', 'Mexico.\\n', 'Korea.\\n']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Posteriormente, se convierte las listas a una cadena de texto, para extraer unicamente los \n",
        "# nombres de los paises, ya que como se puede verificar, algunos paises incluyen otros simbolos\n",
        "# como puntos, comas, \\n, etc. \n",
        "\n",
        "#NOTA: No se ha tomado en cuenta el unique_texto5 ni unique_texto7 \n",
        "\n",
        "sincoma1 = \"\".join([str(_) for _ in unique_texto1])\n",
        "sincoma2 = \"\".join([str(_) for _ in unique_texto2])\n",
        "sincoma3 = \"\".join([str(_) for _ in unique_texto3])\n",
        "sincoma4 = \"\".join([str(_) for _ in unique_texto4])\n",
        "sincoma8 = \"\".join([str(_) for _ in unique_texto8])\n",
        "\n",
        "# Para los patrones, se requiere extraer unicamente el nombre de los paises, por lo que \n",
        "# para el primero, como se tienen paises de manera LChina, se debe expecificar que solo se \n",
        "# desea extraer China, por lo mismo se usa el patron Letra mayuscula seguido de una letra minuscula\n",
        "# [A-Z]{1}[a-z]{1}, seguido de un patrón alfa numérico \\w*\n",
        "\n",
        "texto_unico1_1 = re.findall(r'([A-Z]{1}[a-z]{1}\\w*)', sincoma1)\n",
        "\n",
        "# Las demás solo tiene el patron alfanumérico\n",
        "\n",
        "texto_unico1_2 = re.findall(r'\\w*', sincoma2)\n",
        "texto_unico1_3 = re.findall(r'\\w*', sincoma3)\n",
        "texto_unico1_4 = re.findall(r'\\w*', sincoma4)\n",
        "texto_unico1_8 = re.findall(r'\\w*', sincoma8)\n",
        "\n",
        "# Se vuelve a generar listas con elementos unicos\n",
        "\n",
        "texto_unico1 = list(set(texto_unico1_1))\n",
        "texto_unico2 = list(set(texto_unico1_2))\n",
        "texto_unico3 = list(set(texto_unico1_3))\n",
        "texto_unico4 = list(set(texto_unico1_4))\n",
        "texto_unico8 = list(set(texto_unico1_8))\n",
        "\n",
        "print (texto_unico1)\n",
        "print (texto_unico2)\n",
        "print (texto_unico3)\n",
        "print (texto_unico4)\n",
        "print (texto_unico8)"
      ],
      "metadata": {
        "id": "YgAbrZr2h-Jc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eda9673f-f931-483c-e8e5-596cb47190e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Israel', 'Italy', 'Colombia', 'Tunisia', 'Pakistan', 'Australia', 'India', 'Singapore', 'Romania', 'Germany', 'Chile', 'Spain', 'Korea', 'Hungary', 'Denmark', 'China', 'France', 'Switzerland', 'Mexico', 'Russia', 'Austria', 'Taiwan', 'Thailand', 'Argentina', 'Ukraine', 'Uruguay', 'Belgium']\n",
            "['', 'Brazil', 'Israel', 'Italy', 'Colombia', 'Venezuela', 'Canada', 'Tunisia', 'Ireland', 'Pakistan', 'Egypt', 'Australia', 'India', 'Singapore', 'Belgium', 'Japan', 'Romania', 'Netherlands', 'Germany', 'Chile', 'Spain', 'Hungary', 'Korea', 'Greece', 'Denmark', 'China', 'France', 'Philippines', 'Switzerland', 'Norway', 'Russia', 'Mexico', 'Sweden', 'Austria', 'Portugal', 'Poland', 'Taiwan', 'Thailand', 'Finland', 'Argentina', 'Ukraine', 'Uruguay', 'Malaysia', 'Slovenia', 'Turkey', 'Algeria']\n",
            "['', 'China']\n",
            "['', 'Argentina', 'Switzerland', 'Brazil', 'USA', 'Italy', 'Colombia', 'Germany', 'Africa', 'Australia', 'China']\n",
            "['', 'Colombia', 'Tunisia', 'Pakistan', 'Australia', 'India', 'Singapore', 'Romania', 'Germany', 'Chile', 'Spain', 'Hungary', 'Korea', 'China', 'France', 'Switzerland', 'Russia', 'Mexico', 'Austria', 'Taiwan', 'Thailand', 'Argentina', 'Ukraine', 'Uruguay', 'Belgium']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Para unique_texto5, primero se lo convierte en una cadena de texto,  posteriormente se elimina\n",
        "# el punto y el salto de línea y se los reemplaza por una coma y un espacio y se nombra a este \n",
        "# como textosub1_5\n",
        "\n",
        "sincoma5 = \"\".join([str(_) for _ in unique_texto5])\n",
        "print (sincoma5)\n",
        "textosub1_5 = re.sub(r'\\.\\n', ', ', sincoma5)\n",
        "print (textosub1_5)\n",
        "\n",
        "# Ahora a textosub1_5 se le extrae unicamente el nombre del pais, el cual esta compiesto por \n",
        "# PrimerNombre SegundoNombre por lo que se utiliza el siguiente patron:\n",
        "\n",
        "texto_unico1_5 = re.findall(r'([A-Z]{1}\\w{3,5}\\s\\w*)', textosub1_5)\n",
        "print (texto_unico1_5)\n",
        "\n",
        "# Se renombra la anterior lista creada como texto_unico5, al igual que las demás.\n",
        "\n",
        "texto_unico5 = texto_unico1_5\n",
        "\n",
        "print (texto_unico5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8h5qC80piEWq",
        "outputId": "5b93d5f9-9720-4a3c-94c2-bbaf3923e6a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "United Kingdom.\n",
            "The Netherlands.\n",
            "Saudi Arabia.\n",
            "Hong Kong.\n",
            "South Africa.\n",
            "New Zealand.\n",
            "Czech Republic.\n",
            "Costa Rica.\n",
            "\n",
            "United Kingdom, The Netherlands, Saudi Arabia, Hong Kong, South Africa, New Zealand, Czech Republic, Costa Rica, \n",
            "['United Kingdom', 'Saudi Arabia', 'Hong Kong', 'South Africa', 'Czech Republic', 'Costa Rica']\n",
            "['United Kingdom', 'Saudi Arabia', 'Hong Kong', 'South Africa', 'Czech Republic', 'Costa Rica']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Por otra parte, para el texto8, primero a este se lo convierte en una cadena de texto, \n",
        "# y se la nombra texto8_1\n",
        "\n",
        "texto8_1 = \"\".join([str(_) for _ in texto8])\n",
        "\n",
        "# En este se extrae específicamente la palabra USA\n",
        "\n",
        "texto8_2 = re.findall(r'USA', texto8_1)\n",
        "\n",
        "# De esta, se genera una nueva lista con los elementos unicos. \n",
        "\n",
        "texto_unico6 = list(set(texto8_2))\n",
        "\n",
        "print(texto_unico6)\n",
        "\n",
        "# Finalmente, para unique_texto7, se lo convierte en una cadena de texto, de la cual se busca el \n",
        "# patrón específico y se genera una lista con elementos unicos.\n",
        "\n",
        "sincoma7 = \"\".join([str(_) for _ in unique_texto7])\n",
        "\n",
        "texto_unico1_7 = re.findall(r'\\w*', sincoma7)\n",
        "\n",
        "texto_unico7 = list(set(texto_unico1_7))\n",
        "\n",
        "print (texto_unico7)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RNICNjHCigWw",
        "outputId": "71ef97d7-095e-408f-faea-0f7251447ad8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['USA']\n",
            "['', 'USA']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Se elimina el elemento 0 que corresponde a '', y no se toma en cuenta a texto_unico5 ni \n",
        "#texto_unico6, ya que los mismos no poseen el elemento mencionado\n",
        "\n",
        "texto_unico1.pop(0)\n",
        "texto_unico2.pop(0)\n",
        "texto_unico3.pop(0)\n",
        "texto_unico4.pop(0)\n",
        "texto_unico7.pop(0)\n",
        "texto_unico8.pop(0)\n",
        "\n",
        "print(texto_unico1)\n",
        "print(texto_unico2)\n",
        "print(texto_unico3)\n",
        "print(texto_unico4)\n",
        "print(texto_unico7)\n",
        "print(texto_unico8)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MCGSgxIzk00j",
        "outputId": "1e60ec99-61e9-4c32-d3ff-31d962cf2671"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Italy', 'Colombia', 'Tunisia', 'Pakistan', 'Australia', 'India', 'Singapore', 'Romania', 'Germany', 'Chile', 'Spain', 'Korea', 'Hungary', 'Denmark', 'China', 'France', 'Switzerland', 'Mexico', 'Russia', 'Austria', 'Taiwan', 'Thailand', 'Argentina', 'Ukraine', 'Uruguay', 'Belgium']\n",
            "['Brazil', 'Israel', 'Italy', 'Colombia', 'Venezuela', 'Canada', 'Tunisia', 'Ireland', 'Pakistan', 'Egypt', 'Australia', 'India', 'Singapore', 'Belgium', 'Japan', 'Romania', 'Netherlands', 'Germany', 'Chile', 'Spain', 'Hungary', 'Korea', 'Greece', 'Denmark', 'China', 'France', 'Philippines', 'Switzerland', 'Norway', 'Russia', 'Mexico', 'Sweden', 'Austria', 'Portugal', 'Poland', 'Taiwan', 'Thailand', 'Finland', 'Argentina', 'Ukraine', 'Uruguay', 'Malaysia', 'Slovenia', 'Turkey', 'Algeria']\n",
            "['China']\n",
            "['Argentina', 'Switzerland', 'Brazil', 'USA', 'Italy', 'Colombia', 'Germany', 'Africa', 'Australia', 'China']\n",
            "['USA']\n",
            "['Colombia', 'Tunisia', 'Pakistan', 'Australia', 'India', 'Singapore', 'Romania', 'Germany', 'Chile', 'Spain', 'Hungary', 'Korea', 'China', 'France', 'Switzerland', 'Russia', 'Mexico', 'Austria', 'Taiwan', 'Thailand', 'Argentina', 'Ukraine', 'Uruguay', 'Belgium']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Se unen todas las listas creadas con .extend y finalmente se imprime para comprobar\n",
        "texto_unico1.extend(texto_unico2)\n"
      ],
      "metadata": {
        "id": "-I_YDLYAk5BL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "texto_unico1.extend(texto_unico3)\n"
      ],
      "metadata": {
        "id": "d1hDtCIylBN4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "texto_unico1.extend(texto_unico4)\n"
      ],
      "metadata": {
        "id": "teN6p6vvlCtl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "texto_unico1.extend(texto_unico5)\n"
      ],
      "metadata": {
        "id": "VIo4Br0vlEkg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "texto_unico1.extend(texto_unico6)\n"
      ],
      "metadata": {
        "id": "qPK4QmwOlGSL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "texto_unico1.extend(texto_unico7)\n"
      ],
      "metadata": {
        "id": "zw4qPuSSlH_V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "texto_unico1.extend(texto_unico8)\n",
        "\n",
        "print(texto_unico1)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QH4qoNVglRca",
        "outputId": "58389ee3-c16d-4264-a0eb-fd0c3e8c47d9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Italy', 'Colombia', 'Tunisia', 'Pakistan', 'Australia', 'India', 'Singapore', 'Romania', 'Germany', 'Chile', 'Spain', 'Korea', 'Hungary', 'Denmark', 'China', 'France', 'Switzerland', 'Mexico', 'Russia', 'Austria', 'Taiwan', 'Thailand', 'Argentina', 'Ukraine', 'Uruguay', 'Belgium', 'Brazil', 'Israel', 'Italy', 'Colombia', 'Venezuela', 'Canada', 'Tunisia', 'Ireland', 'Pakistan', 'Egypt', 'Australia', 'India', 'Singapore', 'Belgium', 'Japan', 'Romania', 'Netherlands', 'Germany', 'Chile', 'Spain', 'Hungary', 'Korea', 'Greece', 'Denmark', 'China', 'France', 'Philippines', 'Switzerland', 'Norway', 'Russia', 'Mexico', 'Sweden', 'Austria', 'Portugal', 'Poland', 'Taiwan', 'Thailand', 'Finland', 'Argentina', 'Ukraine', 'Uruguay', 'Malaysia', 'Slovenia', 'Turkey', 'Algeria', 'China', 'Argentina', 'Switzerland', 'Brazil', 'USA', 'Italy', 'Colombia', 'Germany', 'Africa', 'Australia', 'China', 'United Kingdom', 'Saudi Arabia', 'Hong Kong', 'South Africa', 'Czech Republic', 'Costa Rica', 'USA', 'USA', 'Colombia', 'Tunisia', 'Pakistan', 'Australia', 'India', 'Singapore', 'Romania', 'Germany', 'Chile', 'Spain', 'Hungary', 'Korea', 'China', 'France', 'Switzerland', 'Russia', 'Mexico', 'Austria', 'Taiwan', 'Thailand', 'Argentina', 'Ukraine', 'Uruguay', 'Belgium']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Con las listas unificadas, se genera una nueva, compuesta por elementos únicos, con el nombre de\n",
        "# paises\n",
        "\n",
        "paises = list(set(texto_unico1))\n",
        "\n",
        "print(len(paises))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-EgygFiqlXN1",
        "outputId": "dd207ea0-170c-44ac-c1f7-507546f4dc91"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "53\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Se ordena la anterior y se imprime los 53 paises que la componen\n",
        "\n",
        "paises.sort()\n",
        "paises[:53]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wjPIuY5ClYeN",
        "outputId": "a11c10e2-f2d1-4f53-aa4c-e1b7ec0df72f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['Africa',\n",
              " 'Algeria',\n",
              " 'Argentina',\n",
              " 'Australia',\n",
              " 'Austria',\n",
              " 'Belgium',\n",
              " 'Brazil',\n",
              " 'Canada',\n",
              " 'Chile',\n",
              " 'China',\n",
              " 'Colombia',\n",
              " 'Costa Rica',\n",
              " 'Czech Republic',\n",
              " 'Denmark',\n",
              " 'Egypt',\n",
              " 'Finland',\n",
              " 'France',\n",
              " 'Germany',\n",
              " 'Greece',\n",
              " 'Hong Kong',\n",
              " 'Hungary',\n",
              " 'India',\n",
              " 'Ireland',\n",
              " 'Israel',\n",
              " 'Italy',\n",
              " 'Japan',\n",
              " 'Korea',\n",
              " 'Malaysia',\n",
              " 'Mexico',\n",
              " 'Netherlands',\n",
              " 'Norway',\n",
              " 'Pakistan',\n",
              " 'Philippines',\n",
              " 'Poland',\n",
              " 'Portugal',\n",
              " 'Romania',\n",
              " 'Russia',\n",
              " 'Saudi Arabia',\n",
              " 'Singapore',\n",
              " 'Slovenia',\n",
              " 'South Africa',\n",
              " 'Spain',\n",
              " 'Sweden',\n",
              " 'Switzerland',\n",
              " 'Taiwan',\n",
              " 'Thailand',\n",
              " 'Tunisia',\n",
              " 'Turkey',\n",
              " 'USA',\n",
              " 'Ukraine',\n",
              " 'United Kingdom',\n",
              " 'Uruguay',\n",
              " 'Venezuela']"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Se activa el paquete csv, que permite leer archivos con terminación .csv\n",
        "# Se abre el archivo coordenadas.csv el cual consta de los paises, las latitudes y longitudes.\n",
        "\n",
        "import csv\n",
        "coordenadas = {}\n",
        "with open('coordenadas.csv') as file:\n",
        "    csvr = csv.DictReader(file)\n",
        "    for row in csvr: # Se escoje que etiquetas se usara y se las convierte en filas\n",
        "        coordenadas[row['name']] = [(row['latitude']),(row['longitude'])]\n",
        "# Se crea las listas para los nombres de los paises, la longitud, latitud, y el conteo de\n",
        "# repeticiones.\n",
        "\n",
        "pais_name = []\n",
        "pais_long = []\n",
        "pais_lat = []\n",
        "pais_count = []"
      ],
      "metadata": {
        "id": "B5mypGBXldrj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Se unen todas las listas creadas al principio, las cuales llevaban el nombre de texto\n",
        "texto = texto3\n",
        "texto_a = texto4\n",
        "texto_b = texto5\n",
        "texto_c = texto6\n",
        "texto_d = texto7\n",
        "texto_e = texto8_2 # Se emplea texto8_2, ya que este posee el nombre del pais sin ningun simbolo\n",
        "                   # espescial como en texto8\n",
        "texto_f = texto9\n",
        "texto_g = texto10"
      ],
      "metadata": {
        "id": "bq9x-JKHllD0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "texto.extend(texto_a)\n"
      ],
      "metadata": {
        "id": "O0ZDa3Avlps8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "texto.extend(texto_b)\n"
      ],
      "metadata": {
        "id": "ln5Mub2pluPF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "texto.extend(texto_c)\n"
      ],
      "metadata": {
        "id": "XQE87nOClwhf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "texto.extend(texto_g)"
      ],
      "metadata": {
        "id": "2GDxDKJRlyFN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#print (texto)"
      ],
      "metadata": {
        "id": "IJByGn1glyvb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Al igual que antes, a esta nueva lista llamada texto, se la convierte en una cadena de texto\n",
        "# de la cual se extrae todos los nombres de los paises.\n",
        "\n",
        "paises_rep = \"\".join([str(_) for _ in texto])\n",
        "\n",
        "paises_repetidos = re.findall(r'([A-Z]{1}[a-z]{1}\\w*)', paises_rep)\n",
        "\n",
        "#print(paises_repetidos)\n"
      ],
      "metadata": {
        "id": "gkTBnFKpl2Jb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Por otra parte al texto_e tener paises compuestos por dos nombres, se realiza esto por separado:\n",
        "texto_e1 = \"\".join([str(_) for _ in texto_e])\n",
        "\n",
        "plus_e = re.findall(r'USA', texto_e1)\n",
        "\n",
        "#print(plus_e)\n",
        "\n",
        "# Se unen ambas listas con extend\n",
        "\n",
        "paises_repetidos.extend(plus_e)"
      ],
      "metadata": {
        "id": "4FV7hHtpmFFw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#texto.extend(texto_f)\n",
        "\n",
        "# Por otra parte al texto_f tener paises compuestos por dos nombres, se realiza esto por separado:\n",
        "texto_f1 = \"\".join([str(_) for _ in texto_f])\n",
        "\n",
        "plus_f = re.findall(r'USA', texto_f1)\n",
        "\n",
        "#print(plus_f)\n",
        "\n",
        "# Se unen ambas listas con extend\n",
        "\n",
        "paises_repetidos.extend(plus_f)"
      ],
      "metadata": {
        "id": "FjHOplq5mKey"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Por otra parte al texto_d tener paises compuestos por dos nombres, se realiza esto por separado:\n",
        "texto_d1 = \"\".join([str(_) for _ in texto_d])\n",
        "\n",
        "plus = re.findall(r'([A-Z]{1}\\w{3,5}\\s\\w*)', texto_d1)\n",
        "\n",
        "# Se unen ambas listas con extend\n",
        "\n",
        "paises_repetidos.extend(plus)\n",
        "\n",
        "#print(paises_repetidos)"
      ],
      "metadata": {
        "id": "l3b3-lUWmONq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for p in paises:\n",
        "    if p in coordenadas.keys():\n",
        "        pais_name.append(p)\n",
        "        pais_lat.append(float(coordenadas[p][0]))\n",
        "        pais_long.append(float(coordenadas[p][1]))\n",
        "        pais_count.append(paises_repetidos.count(p))"
      ],
      "metadata": {
        "id": "qaXzWZjEmVRT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Se verifica que las mismas contengan todos los paises, y que a estos les corresponda las coorde-\n",
        "# nadas y el conteo correspondiente a cada uno. \n",
        "\n",
        "print(pais_name)\n",
        "print(pais_lat)\n",
        "print(pais_long)\n",
        "print(pais_count)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TrTqKY-cmi-d",
        "outputId": "7fc476f8-fc70-43bd-b7b9-0719ffca44d6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['Algeria', 'Argentina', 'Australia', 'Austria', 'Belgium', 'Brazil', 'Canada', 'Chile', 'China', 'Colombia', 'Costa Rica', 'Czech Republic', 'Denmark', 'Egypt', 'Finland', 'France', 'Germany', 'Greece', 'Hong Kong', 'Hungary', 'India', 'Ireland', 'Israel', 'Italy', 'Japan', 'Korea', 'Malaysia', 'Mexico', 'Norway', 'Pakistan', 'Philippines', 'Poland', 'Portugal', 'Romania', 'Russia', 'Saudi Arabia', 'Singapore', 'Slovenia', 'South Africa', 'Spain', 'Sweden', 'Switzerland', 'Taiwan', 'Thailand', 'Tunisia', 'Turkey', 'USA', 'Ukraine', 'United Kingdom', 'Uruguay', 'Venezuela']\n",
            "[28.033886, -38.416097, -25.274398, 47.516231, 50.503887, -14.235004, 56.130366, -35.675147, 35.86166, 4.570868, 9.748917, 49.817492, 56.26392, 26.820553, 61.92411, 46.227638, 51.165691, 39.074208, 22.396428, 47.162494, 20.593684, 53.41291, 31.046051, 41.87194, 36.204824, 35.907757, 4.210484, 23.634501, 60.472024, 30.375321, 12.879721, 51.919438, 39.399872, 45.943161, 61.52401, 23.885942, 1.352083, 46.151241, -30.559482, 40.463667, 60.128161, 46.818188, 23.69781, 15.870032, 33.886917, 38.963745, 37.09024, 48.379433, 55.378051, -32.522779, 6.42375]\n",
            "[1.659626, -63.616672, 133.775136, 14.550072, 4.469936, -51.92528, -106.346771, -71.542969, 104.195397, -74.297333, -83.753428, 15.472962, 9.501785, 30.802498, 25.748151, 2.213749, 10.451526, 21.824312, 114.109497, 19.503304, 78.96288, -8.24389, 34.851612, 12.56738, 138.252924, 127.766922, 101.975766, -102.552784, 8.468946, 69.345116, 121.774017, 19.145136, -8.224454, 24.96676, 105.318756, 45.079162, 103.819836, 14.995463, 22.937506, -3.74922, 18.643501, 8.227512, 120.960515, 100.992541, 9.537499, 35.243322, -95.712891, 31.16558, -3.435973, -55.765835, -66.58973]\n",
            "[1, 64, 1286, 15, 44, 912, 26, 51, 1587, 56, 2, 25, 60, 3, 3, 129, 132, 4, 1, 9, 43, 28, 17, 109, 52, 59, 5, 209, 9, 40, 11, 2, 2, 32, 228, 5, 10, 4, 1, 32, 6, 70, 73, 39, 10, 32, 1012, 9, 107, 4, 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Se procede a graficar los puntos en un mapa carteciano mediante el paquete matplotlib.pyplot\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "plt.scatter(pais_long, pais_lat, s = pais_count, c= pais_count)\n",
        "plt.colorbar()\n",
        "plt.xlim(-115,145) # Las dimensiones del plano dependen de las listas de coordenadas.\n",
        "plt.ylim(-70, 70)\n",
        "# Se añaden algunos paises como referencia y se marcan los que tienen más relevancia.\n",
        "ard = dict(arrowstyle=\"->\")\n",
        "plt.annotate('USA', xy = (-95.712891, 37.09024), \n",
        "               xytext = (-87.183406, 30.831239), arrowprops = ard)\n",
        "plt.annotate('Rusia', xy = (105.318756, 61.52401), \n",
        "               xytext = (100.318756, 50.016521), arrowprops= ard)\n",
        "plt.annotate('Brazil', xy = (-51.92528, -14.235004), \n",
        "               xytext = (-30.318756, -05.016521), arrowprops= ard)\n",
        "plt.annotate('Australia', xy = (133.775136, -25.274398), \n",
        "               xytext = (120.921327, -10.759275), arrowprops= ard)\n",
        "plt.annotate('Mexico', xy = (-102.552784, 23.634501), \n",
        "               xytext = (-110.552784, 15.634501), arrowprops= ard)\n",
        "plt.annotate('España', xy = (-3.74922, 40.463667), \n",
        "               xytext = (-30.74922, 40.463667), arrowprops= ard)\n",
        "plt.annotate('China', xy = (104.195397, 35.86166), \n",
        "               xytext = (110.510093, 40.339852), arrowprops= ard)\n",
        "plt.annotate('Noruega', xy = (8.468946, 60.472024), \n",
        "               xytext = (11.468946, 64.472024), arrowprops= ard)\n",
        "plt.annotate('Reino Unido', xy = (-3.435973, 55.378051), \n",
        "               xytext = (-20.435973, 65.378051), arrowprops= ard)\n",
        "\n",
        "params = plt.gcf()\n",
        "plSize = params.get_size_inches()\n",
        "params.set_size_inches( (plSize[0] * 3, plSize[1] * 3) )\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 780
        },
        "id": "_OpMcWCUmtbH",
        "outputId": "7b72d4b5-84c3-4808-b73b-56335e8fb879"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1920x1440 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}